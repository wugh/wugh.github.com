<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Life in a Nutshell</title><link href="https://wugh.github.io/" rel="alternate"></link><link href="https://wugh.github.io/feeds/nlp.atom.xml" rel="self"></link><id>https://wugh.github.io/</id><updated>2013-11-25T09:08:37+08:00</updated><entry><title>文本分类</title><link href="https://wugh.github.io/posts/2013/11/text-classification/" rel="alternate"></link><updated>2013-11-25T09:08:37+08:00</updated><author><name>Guohua Wu</name></author><id>tag:wugh.github.io,2013-11-25:posts/2013/11/text-classification/</id><summary type="html">&lt;hr /&gt;
&lt;h3&gt;1&amp;nbsp;概述&lt;/h3&gt;
&lt;p&gt;最近做了一个简单的文本分类程序，在这篇博客里面记录具体的分类流程。一般来说包括&amp;nbsp;以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语料获取&lt;/li&gt;
&lt;li&gt;文本预处理&lt;/li&gt;
&lt;li&gt;特征值提取&lt;/li&gt;
&lt;li&gt;训练分类器&lt;/li&gt;
&lt;li&gt;评估分类性能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下文将分析上面每个步骤的具体实现过程。&lt;/p&gt;
&lt;h3&gt;2&amp;nbsp;语料获取&lt;/h3&gt;
&lt;p&gt;语料获取可以采用爬虫来获得，在实现的过程中从网易上获取了十个类别的新闻语料，分
别是：时政、军事、教育、娱乐、房产、女人、财经、体育、科技和旅游。关于爬虫怎么
写可以参考&lt;a href="http://blog.pluskid.org/?p=366" title="Scrapy 轻松
定制网络爬虫"&gt;Scrapy 轻松定制网络爬虫&lt;/a&gt;，这篇文章对于学习&lt;a href="http://scrapy.org" title="scrapy"&gt;Scrapy&lt;/a&gt;框架非常有
用，但是文章较老，很多接口可能很多都被丢弃，新的接口参考&lt;a href="http://doc.scrapy.org/en/latest/intro/tutorial.html"&gt;Scrapy
Tutorial&lt;/a&gt;。如果实在懒得爬
语料可以用我获取好的数据，对数据做一个简单说明，总共有测试语料10万篇，每种新闻
各1万篇；测试语料1万篇，每种新闻1千篇，点击&lt;a href="https://drive.google.com/file/d/0BywGHFgHsfRbSGVSbDhGLXVrUzg/edit?usp=sharing" title="新闻语料"&gt;这里
&lt;/a&gt;下载，语料示例如下，&lt;code&gt;URL::&lt;/code&gt;和&lt;code&gt;END&lt;/code&gt;之间是一篇文章：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;URL::http://politics.people.com.cn/n/2012/1120/c14562-19635416.html 2012-11-20
贵州毕节5名男孩取暖致死 副区长等8人被免职
“中国网事”记者获悉，毕节市委19日晚研究决定，对5名男孩意外死亡事件负有领导和管理责任的七星关区分管民政工作的副区长唐兴全、分管教育工作的副区长高守军等8人分别进行停职或免职处理。(记者王丽)
END::
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3&amp;nbsp;语料预处理&lt;/h3&gt;
&lt;p&gt;得到语料之后需要对语料做预处理，预处理的过程包括：分词、去停用词、去低频词等。&lt;/p&gt;
&lt;h4&gt;3.1&amp;nbsp;分词和去停用词&lt;/h4&gt;
&lt;p&gt;现在有很多可以免费使用的分词工具，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/fudannlp/" title="FudanNLP"&gt;FudanNLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ictclas.nlpir.org/" title="nlpir"&gt;中科院分词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ansjsun/ansj_seg" title="ansj seg"&gt;ansj分词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/fxsjy/jieba" title="jieba"&gt;jieba分词&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文使用的是&lt;a href="http://code.google.com/p/fudannlp/" title="FudanNLP"&gt;FudanNLP&lt;/a&gt;中文自然语言处理工具包，如何分词请参考
&lt;a href="https://code.google.com/p/fudannlp/wiki/QuickStart" title="QuickStart"&gt;QuickStart&lt;/a&gt;和
&lt;a href="https://fudannlp.googlecode.com/svn/FudanNLP-1.5-API/java-docs/index.html" title="Api Doc"&gt;APIDoc&lt;/a&gt;，由于代码比较多，文章中仅仅贴出部分函数代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doSeg&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 切分一个大文件很消耗时间&lt;/span&gt;
        &lt;span class="c1"&gt;// 因此如果输出文件存在就抛出异常&lt;/span&gt;
        &lt;span class="c1"&gt;// 让用户确保不会产生覆盖文件&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; is existed&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;LineIterator&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lineIterator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infile&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;BufferedWriter&lt;/span&gt; &lt;span class="n"&gt;bw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;bw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BufferedWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OutputStreamWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outfile&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;stringBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasNext&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;trim&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;URL::&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;startsWith&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;END::&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)){&lt;/span&gt;
                    &lt;span class="n"&gt;stringBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                    &lt;span class="n"&gt;stringBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="c1"&gt;// seg line&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;segTagger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tag2Array&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// 对分词的结果去除停用词&lt;/span&gt;
                &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;baseWords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stopWords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;phraseDel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;stringBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Joiner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baseWords&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;stringBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bw&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;bw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述代码中通过&lt;code&gt;segTagger.tag2Array(line)&lt;/code&gt;分词，得到的分词结果是一个数组，再对分
词的结果去除停用词&lt;code&gt;stopWords.phraseDel(words)&lt;/code&gt;。这里的&lt;code&gt;segTagger&lt;/code&gt;和&lt;code&gt;stopWords&lt;/code&gt;
都是有&lt;a href="http://code.google.com/p/fudannlp/" title="FudanNLP"&gt;FudanNLP&lt;/a&gt;提供的类。在语料中，一篇文章的正文是&lt;code&gt;URL::&lt;/code&gt;和&lt;code&gt;END::&lt;/code&gt;
之间的部分，代码中逐行分词，然后把分词和去停用词的多行合并成一行，最后得到的一&amp;nbsp;篇文章就是一行。&lt;/p&gt;
&lt;h4&gt;3.2&amp;nbsp;去除低频词&lt;/h4&gt;
&lt;p&gt;通过分词和去除停用词之后，语料库中的词汇表规模（不同的词的数目）还是非常的大，
10万篇语料处理之后，词汇表有69万个词。这么大的词汇表对于后面我们计算特征值非常
不利，例如用最简单的&lt;code&gt;TF(term frequency)&lt;/code&gt;计算特征，要把每篇文章转换成一个词频向
量，而这个向量的长度就是我们的词汇表大小，如果这个表太大的话，会有很多词频为0，
直接导致数据稀疏问题，而且也会有很多噪声。从词汇表里面去除一些词的方法，最简单&amp;nbsp;的是采用词频过滤，即词频低于多少的词就忽略，下面描述具体做法。&lt;/p&gt;
&lt;p&gt;首先，我们要在整个训练集合上统计所有词的频率分布，这里用&lt;code&gt;JAVA&lt;/code&gt;的&lt;code&gt;HashMap&lt;/code&gt;就能实
现，以词为键，词出现的次数（词频）为值，整个语料库遍历之后，就得到每个词分别在
语料库里面出现多少次，最后对这个&lt;code&gt;HashMap&lt;/code&gt;做一个按值降序排序，越早出现的词那么词
频就越高。下图是我统计的一个累计词频分布图，累积地统计个词的出现次数占总次数的
比例，发现少部分词占有了大部分的词频。更多有意思的词频规律参考
&lt;a href="https://zh.wikipedia.org/wiki/%E9%BD%8A%E5%A4%AB%E5%AE%9A%E5%BE%8B"&gt;Zipf&amp;#8217;s law&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="zipflaw" src="https://wugh.github.io/images/NLP/zipfs-law.png" /&gt;&lt;/p&gt;
&lt;p&gt;本文最终取前3万个词频最高的词作为词汇表，这3万个词，总的出现次数已经占到总次数
的90%。当然从词汇表里面去除一些词还有更高级的做法，例如：计算每个词对整个语料库
的信息增益，取信息增益最高的多少个词作为词汇表，信息增益是什么，请参考&lt;a href="http://www.blogjava.net/zhenandaci/archive/2009/03/24/261701.html"&gt;这里
&lt;/a&gt;，具体实现
参考&lt;a href="http://www.cnblogs.com/zhangchaoyang/articles/2236475.html"&gt;这里&lt;/a&gt;；也可以
用&lt;a href="http://zh.wikipedia.org/wiki/TF-IDF" title="if idf"&gt;&lt;span class="caps"&gt;TF&lt;/span&gt;-&lt;span class="caps"&gt;IDF&lt;/span&gt;&lt;/a&gt;来度量词的重要性。&lt;/p&gt;
&lt;h3&gt;4&amp;nbsp;特征提取&lt;/h3&gt;
&lt;p&gt;特征提取的目地是把文本转换成特征向量，为后面的分类器训练做数据准备。最经典的方
法应该就是&lt;a href="http://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F%E7%A9%BA%E9%96%93%E6%A8%A1%E5%9E%8B" title="vector space model"&gt;向量空间模型
&lt;/a&gt;，更复杂的方法可以用
&lt;a href="http://en.wikipedia.org/wiki/Latent_Dirichlet_allocation" title="LDA"&gt;&lt;span class="caps"&gt;LDA&lt;/span&gt;&lt;/a&gt;等。下面分
别介绍向量空间模型和&lt;span class="caps"&gt;LDA&lt;/span&gt;。&lt;/p&gt;
&lt;h4&gt;4.1&amp;nbsp;向量空间模型&lt;/h4&gt;
&lt;p&gt;向量空间模型就是把词汇表的每个词都当作特征的一个维度，特征的取值是这个词在这篇
文章中出现的次数。现在假设词汇表有六个词，分别是：&lt;code&gt;上海 海关 建立 任务 提醒 机制&lt;/code&gt;
，下面示例如何把文章换转成一个向量，假设语料库里面有两篇文章
&lt;span class="math"&gt;\(d_1\)&lt;/span&gt;和&lt;span class="math"&gt;\(d_2\)&lt;/span&gt;&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{aligned}
&amp;amp;d_1: 上海\quad{}海关\quad{}建立\quad{}任务\quad{}上海\cr
&amp;amp;d_2: 上海\quad{}建立\quad{}任务\quad{}提醒
\end{aligned} 
$$&lt;/div&gt;
&lt;p&gt;把词汇表的词依次记作: &lt;span class="math"&gt;\(w_1\ w_2\ w_3\ w_4\ w_5\ w_6\)&lt;/span&gt;，就可以统计文章中每个词出
现的次数。以&lt;span class="math"&gt;\(d_1\)&lt;/span&gt;为例子，在&lt;span class="math"&gt;\(d_1\)&lt;/span&gt;中，&lt;span class="math"&gt;\(w_1\)&lt;/span&gt;（上海）出现2次，&lt;span class="math"&gt;\(w_2\)&lt;/span&gt;出现1次，&lt;span class="math"&gt;\(w_3\)&lt;/span&gt;出
现1次，&lt;span class="math"&gt;\(w_4\)&lt;/span&gt;出现1次，&lt;span class="math"&gt;\(w_5,w_6\)&lt;/span&gt;出现0次，最终向量形式为：&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{aligned}
&amp;amp; v: w_1\quad{}w_2\quad{}w_3\quad{}w_4\quad{}w_5\quad{}w_6\cr
&amp;amp; d_1: 2\quad{}1\quad{}1\quad{}1\quad{}0\quad{}0\cr
&amp;amp; d_2: 1\quad{}0\quad{}1\quad{}1\quad{}1\quad{}0
\end{aligned}
$$&lt;/div&gt;
&lt;p&gt;这样就可以把每个文档都转换成一个词频向量，用这个词频向量就可以计算两个文档之间&amp;nbsp;的相似度，即求两个文档词频向量的余弦相似度，相似度越接近1代表越相似：&lt;/p&gt;
&lt;div class="math"&gt;$$
\cos{\theta} = \frac{\mathbf{d_1} \cdot \mathbf{d_2}}{\left\| \mathbf{d_1} \right\| \left \| \mathbf{d_2} \right\|}
$$&lt;/div&gt;
&lt;p&gt;当然这里的词频特征也可以用更为合理的&lt;code&gt;IF-IDF&lt;/code&gt;特征取代，具体请参考&lt;a href="http://zh.wikipedia.org/wiki/向量空間模型" title="VSM"&gt;这里
&lt;/a&gt;的计算过程。&lt;/p&gt;
&lt;h4&gt;4.2 用&lt;span class="caps"&gt;LDA&lt;/span&gt;提取特征(&lt;span class="caps"&gt;OPTIONAL&lt;/span&gt;)&lt;/h4&gt;
&lt;p&gt;其次我们可以使用&lt;span class="caps"&gt;LDA&lt;/span&gt;把每篇文档表示成主题的一个分布，然后用这个主题分布当作特征向
量来训练分类器。可以使用&lt;a href="http://jgibblda.sourceforge.net/" title="JGbibbsLDA"&gt;JGibbsLDA&lt;/a&gt;将训练语料转换成关于主题的分布。由于我们再预处理步骤已经把每篇预处
理好的文档变成一行，接下来我们就可以把训练语料转换成&lt;code&gt;JGibbsLDA&lt;/code&gt;需要的格式。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[M]
[document1]
[document2]
...
[documentM]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;[M]&lt;/code&gt;表示文档总数，没一行是一篇文档，&lt;code&gt;[documenti]&lt;/code&gt;表示语料库里面的第&lt;code&gt;i&lt;/code&gt;篇文档，
每篇文档总用有&lt;code&gt;Ni&lt;/code&gt;个词：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[documenti] = [wordi1] [wordi2] ... [wordiNi]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用&lt;code&gt;JGibbsLDA&lt;/code&gt;训练得到的输出结果中，名为&lt;code&gt;&amp;lt;model_name&amp;gt;.theta&lt;/code&gt;的文件包含了每篇文档
的主题分布&lt;span class="math"&gt;\(p(topic_t|document_m)\)&lt;/span&gt;，一行是一个文档，每列是一个主题。&lt;/p&gt;
&lt;h3&gt;5&amp;nbsp;训练分类器&lt;/h3&gt;
&lt;p&gt;得到每个文档的特征向量之后，训练的过程可以采用各种各样的分类器，例如：朴素贝叶
斯、神经网络、&lt;span class="caps"&gt;SVM&lt;/span&gt;等。本文以&lt;span class="caps"&gt;SVM&lt;/span&gt;为例子简要描述一下分类过程，&lt;span class="caps"&gt;SVM&lt;/span&gt;可以使用
&lt;a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" title="LIBSVM"&gt;&lt;span class="caps"&gt;LIBSVM&lt;/span&gt;&lt;/a&gt;这个库。首先要把特征向量整理成&lt;a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" title="LIBSVM"&gt;&lt;span class="caps"&gt;LIBSVM&lt;/span&gt;&lt;/a&gt;的输入格式，然后&amp;nbsp;再进行训练。&lt;/p&gt;
&lt;h4&gt;5.1&amp;nbsp;特征格式转换&lt;/h4&gt;
&lt;p&gt;由于训练语料里面我们知道每篇文章的类别，因为我们是分文件存储每个类别的文档，可
以把10个类别打上标签&lt;code&gt;0~9&lt;/code&gt;，表示用0来表示1类新闻，1来表示另一种新闻，依此类推。
&lt;a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" title="LIBSVM"&gt;&lt;span class="caps"&gt;LIBSVM&lt;/span&gt;&lt;/a&gt;的输入格式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;label&amp;gt; &amp;lt;index1&amp;gt;:&amp;lt;value1&amp;gt; &amp;lt;index2&amp;gt;:&amp;lt;value2&amp;gt; …
                      …
&amp;lt;label&amp;gt; &amp;lt;index1&amp;gt;:&amp;lt;value1&amp;gt; &amp;lt;index2&amp;gt;:&amp;lt;value2&amp;gt; …
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;假设我们上面举例的&lt;span class="math"&gt;\(d_1\)&lt;/span&gt;文档属于0这个标签，&lt;span class="math"&gt;\(d_2\)&lt;/span&gt;这个文档属于1这个标签，那么这两&amp;nbsp;篇文档可以表示成如下格式：&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{aligned}
d_1: 2\quad{}1\quad{}1\quad{}1\quad{}0\quad{}0\cr
d_2: 1\quad{}0\quad{}1\quad{}1\quad{}1\quad{}0\cr
\Rightarrow\cr
d_1: 0\quad{}1:2\quad{}2:1\quad{}3:1\quad{}4:1\quad{}5:0\quad{}6:0\cr
d_2: 1\quad{}1:1\quad{}2:0\quad{}3:1\quad{}4:1\quad{}5:1\quad{}6:0\cr
\end{aligned}
$$&lt;/div&gt;
&lt;h4&gt;5.2&amp;nbsp;训练&lt;/h4&gt;
&lt;p&gt;训练过程直接使用&lt;a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" title="LIBSVM"&gt;&lt;span class="caps"&gt;LIBSVM&lt;/span&gt;&lt;/a&gt;的&lt;code&gt;C&lt;/code&gt;代码编译好的可执行文件&lt;code&gt;svm-train&lt;/code&gt;，训练之
前可以用&lt;code&gt;svm-scale&lt;/code&gt;对数据进行归一化，假设整理好的训练语料为&lt;code&gt;train.txt&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# 归一化训练语料&lt;/span&gt;
&lt;span class="c"&gt;# 把特征取值范围保存到train.range文件，方便对测试语料归一化&lt;/span&gt;
./svm-scale -s train.range train.txt &amp;gt; train.scale
&lt;span class="c"&gt;# 训练svm模型&lt;/span&gt;
&lt;span class="c"&gt;# type: C-SVC&lt;/span&gt;
&lt;span class="c"&gt;# kernel type: radial basis function: exp(-gamma*|u-v|^2)&lt;/span&gt;
&lt;span class="c"&gt;# gamma: 0.5&lt;/span&gt;
&lt;span class="c"&gt;# C of C-SVC: 4&lt;/span&gt;
&lt;span class="c"&gt;# 训练语料: train.scale&lt;/span&gt;
&lt;span class="c"&gt;# 保存模型: train.scale.model&lt;/span&gt;
./svm-train -s &lt;span class="m"&gt;1&lt;/span&gt; -t &lt;span class="m"&gt;2&lt;/span&gt; -g 0.5 -c &lt;span class="m"&gt;4&lt;/span&gt; train.scale train.scale.model
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6&amp;nbsp;测试分类器性能&lt;/h3&gt;
&lt;p&gt;测试的主要流程如下图，首先也要讲过训练过程的预处理和特征提取，再将特征向量转换
成&lt;a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" title="LIBSVM"&gt;&lt;span class="caps"&gt;LIBSVM&lt;/span&gt;&lt;/a&gt;需要的格式，最后用编译好的&lt;code&gt;svm-predict&lt;/code&gt;可执行文件进行分类，最
后取得的准确率为&lt;code&gt;0.8592%&lt;/code&gt;。
&lt;img alt="chartflow" src="https://wugh.github.io/images/NLP/text-classify-flow.png" /&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="文本分类"></category><category term="SVM"></category></entry></feed>